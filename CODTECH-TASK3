import torch
import torch.optim as optim
import torchvision.transforms as transforms
from torchvision import models
from PIL import Image
import matplotlib.pyplot as plt

# Load and preprocess images
def load_image(image_path, max_size=400):
    image = Image.open(image_path).convert("RGB")
    
    transform = transforms.Compose([
        transforms.Resize((max_size, max_size)),
        transforms.ToTensor()
    ])
    
    image = transform(image).unsqueeze(0)  # Add batch dimension
    return image

# Display images
def show_image(tensor):
    image = tensor.clone().detach()
    image = image.squeeze(0)  # Remove batch dimension
    image = transforms.ToPILImage()(image)
    plt.imshow(image)
    plt.axis("off")
    plt.show()

# Load pre-trained VGG19 model
vgg = models.vgg19(pretrained=True).features.eval()

# Define NST function
def neural_style_transfer(content_path, style_path, output_path, num_steps=300, content_weight=1e5, style_weight=1e10):
    content = load_image(content_path)
    style = load_image(style_path)

    # Use the content image as the starting point
    target = content.clone().requires_grad_(True)
    
    optimizer = optim.Adam([target], lr=0.003)
    
    for step in range(num_steps):
        optimizer.zero_grad()
        
        content_loss = torch.mean((target - content) ** 2)
        style_loss = torch.mean((target - style) ** 2)
        
        total_loss = content_weight * content_loss + style_weight * style_loss
        total_loss.backward()
        optimizer.step()
    
    show_image(target)
    save_image(target, output_path)

# Save output image
def save_image(tensor, filename):
    image = tensor.clone().detach()
    image = image.squeeze(0)
    image = transforms.ToPILImage()(image)
    image.save(filename)

if _name_ == "_main_":
    content_image = "content_image.jpg"  # Replace with your content image
    style_image = "style_image.jpg"      # Replace with your style image
    output_image = "output.jpg"

    neural_style_transfer(content_image, style_image, output_image)
